up:
  - python:
      pip:
        - ./requirements.txt
        - ./tests/requirements-tools.txt
        - ./tests/requirements.txt
  - github-releases:
      pypa/hatch: latest

env:
  PYTHONPATH:
    prepend:
      - value: lib/
        type: path

commands:
  test:
    desc: Run all tests
    run: |
      set -e
      omni test lint
      omni test mypy
      omni test blake
      omni test unit
    subcommands:
      lint:
        desc: Run lint
        run: flake8 lib/ tests/
      mypy:
        desc: Run mypy
        run: mypy lib/ tests/
      blake:
        desc: Run black
        run: black --check lib/ tests/
      unit:
        desc: Run unit and integration tests
        run: pytest --cache-clear tests/ "$@"

  build:
    desc: Build the package
    run: |
      set -eo pipefail
      # Empty the build directory
      rm -rf dist/
      # Get the latest git tag
      git_version=$(git describe --tags --dirty --always)
      # Replace the first dash by a plus
      version=$(echo ${git_version} | sed 's/-/+/')
      # Check if the version is in a valid format
      if [[ "${version}" != v* ]]; then
        version="0.0.0+${version//+/.}"
      fi
      # Write the version to the build version file
      echo "__version__ = \"${version}\"" > lib/omnicli/version.py
      # Build the package
      hatch build
      # Clean up
      rm lib/omnicli/version.py

  publish:
    desc: Publish the package
    run: |
      # Get the latest git tag
      git_version=$(git describe --tags --dirty --always)
      clean_version=$(git describe --tags --abbrev=0)
      # Check if the version values are the same
      if [ "${git_version}" != "${clean_version}" ]; then
        echo "The current version is not clean."
        exit 1
      fi

      omni build
      hatch publish
