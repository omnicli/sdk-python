name: Release next

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  bump-version:
    name: Release next
    runs-on: ubuntu-latest

    if: github.event.ref == 'refs/heads/main'

    steps:
      - name: Create application token
        uses: actions/create-github-app-token@v1
        id: app-token
        env:
          APP_ID: ${{ secrets.OMNICLI_APP_ID }}
          PRIVATE_KEY: ${{ secrets.OMNICLI_PRIVATE_KEY }}
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}

      - name: Identify last release commit
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          LAST_RELEASE_TAG=$(gh --repo "${REPOSITORY}" release list --limit 1 --json tagName | jq -r '.[0].tagName' || echo "")
          if [[ -n "$LAST_RELEASE_TAG" ]]; then
            PREVIOUS_TAG_SHA=$(gh api "repos/${REPOSITORY}/git/ref/tags/${LAST_RELEASE_TAG}" --jq '.object.sha')
            echo "PREVIOUS_TAG_SHA=${PREVIOUS_TAG_SHA}" | tee -a "$GITHUB_ENV"
            echo "CHECKOUT_REF=${PREVIOUS_TAG_SHA}" | tee -a "$GITHUB_ENV
          else
            REPO_CREATED_AT=$(gh api "repos/${REPOSITORY}" --jq '.created_at')
            echo "REPO_CREATED_AT=${REPO_CREATED_AT}" | tee -a "$GITHUB_ENV"
          fi

          if [[ -z "$PREVIOUS_TAG_SHA" ]] && [[ -z "$REPO_CREATED_AT" ]]; then
            echo >&2 "Failed to identify last release commit or repository creation date"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.REPO_CREATED_AT != '' && 0 || 50 }}
          fetch-tags: ${{ env.PREVIOUS_TAG_SHA != '' && 'true' || 'false' }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Check changed files since previous release
        uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          base_sha: ${{ env.PREVIOUS_TAG_SHA }}
          since: ${{ env.REPO_CREATED_AT }}
          files_yaml: |
            source_code:
              lib/**
              tests/**
              .github/workflows/build.yaml

      - name: Check if a new release would be required
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.source_code_any_changed }}
          DELETED_FILES: ${{ steps.changed-files.outputs.source_code_any_deleted }}
          MODIFIED_FILES: ${{ steps.changed-files.outputs.source_code_any_modified }}
        run: |
          PUBLISH_RELEASE=false
          if [[ "$CHANGED_FILES" == "true" ]] || \
             [[ "$DELETED_FILES" == "true" ]] || \
             [[ "$MODIFIED_FILES" == "true" ]]; then
            PUBLISH_RELEASE=true
          fi
          echo "PUBLISH_RELEASE=${PUBLISH_RELEASE}" | tee -a "$GITHUB_ENV"

      - name: Generate next release version
        uses: jveldboom/action-conventional-versioning@v1
        id: version
        if: ${{ env.PUBLISH_RELEASE == 'true' }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          ignore-drafts: true
          ignore-prereleases: true

      - name: Push new tag
        if: ${{ env.PUBLISH_RELEASE == 'true' }}
        run: |
          git tag -a "${{ steps.version.outputs.version-with-prefix }}" -m "Release ${{ steps.version.outputs.version-with-prefix }}"
          git push origin "${{ steps.version.outputs.version-with-prefix }}"
